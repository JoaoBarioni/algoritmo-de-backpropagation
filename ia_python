import numpy as np

# Função de ativação sigmoid
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivada da função sigmoid
def sigmoid_derivative(x):
    return x * (1 - x)

# Dados de entrada e saída
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

# Saída desejada
y = np.array([[0], [1], [1], [0]])

# Configurações da rede neural
input_size = 2
hidden_size = 4
output_size = 1
learning_rate = 0.1
epochs = 10000

# Inicialização de pesos e bias
weights_input_hidden = np.random.uniform(size=(input_size, hidden_size))
weights_hidden_output = np.random.uniform(size=(hidden_size, output_size))

bias_hidden = np.zeros((1, hidden_size))
bias_output = np.zeros((1, output_size))

# Treinamento da rede neural
for epoch in range(epochs):
    # Forward pass
    hidden_input = np.dot(X, weights_input_hidden) + bias_hidden
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, weights_hidden_output) + bias_output
    final_output = sigmoid(final_input)

    # Cálculo do erro
    error = y - final_output

    # Backpropagation
    output_error = error * sigmoid_derivative(final_output)
    hidden_layer_error = output_error.dot(weights_hidden_output.T) * sigmoid_derivative(hidden_output)

    # Atualização de pesos e bias
    weights_hidden_output += hidden_output.T.dot(output_error) * learning_rate
    bias_output += np.sum(output_error, axis=0, keepdims=True) * learning_rate

    weights_input_hidden += X.T.dot(hidden_layer_error) * learning_rate
    bias_hidden += np.sum(hidden_layer_error, axis=0, keepdims=True) * learning_rate

# Teste da rede neural treinada
test_input = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
test_hidden = sigmoid(np.dot(test_input, weights_input_hidden) + bias_hidden)
test_output = sigmoid(np.dot(test_hidden, weights_hidden_output) + bias_output)

print("Saída da rede neural após treinamento:")
print(test_output)
